// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.2
// source: api/helloworld/v1/activity.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationActivityGetActivity = "/api.helloworld.v1.Activity/GetActivity"

type ActivityHTTPServer interface {
	GetActivity(context.Context, *GetActivityRequest) (*GetActivityReply, error)
}

func RegisterActivityHTTPServer(s *http.Server, srv ActivityHTTPServer) {
	r := s.Route("/")
	r.GET("/activity/get", _Activity_GetActivity0_HTTP_Handler(srv))
}

func _Activity_GetActivity0_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityGetActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetActivity(ctx, req.(*GetActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetActivityReply)
		return ctx.Result(200, reply)
	}
}

type ActivityHTTPClient interface {
	GetActivity(ctx context.Context, req *GetActivityRequest, opts ...http.CallOption) (rsp *GetActivityReply, err error)
}

type ActivityHTTPClientImpl struct {
	cc *http.Client
}

func NewActivityHTTPClient(client *http.Client) ActivityHTTPClient {
	return &ActivityHTTPClientImpl{client}
}

func (c *ActivityHTTPClientImpl) GetActivity(ctx context.Context, in *GetActivityRequest, opts ...http.CallOption) (*GetActivityReply, error) {
	var out GetActivityReply
	pattern := "/activity/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityGetActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
